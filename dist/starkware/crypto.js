"use strict";

/////////////////////////////////////////////////////////////////////////////////
// Copyright 2019 StarkWare Industries Ltd.                                    //
//                                                                             //
// Licensed under the Apache License, Version 2.0 (the "License").             //
// You may not use this file except in compliance with the License.            //
// You may obtain a copy of the License at                                     //
//                                                                             //
// https://www.starkware.co/open-source-license/                               //
//                                                                             //
// Unless required by applicable law or agreed to in writing,                  //
// software distributed under the License is distributed on an "AS IS" BASIS,  //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    //
// See the License for the specific language governing permissions             //
// and limitations under the License.                                          //
/////////////////////////////////////////////////////////////////////////////////
var path = require('path');

var BN = require('bn.js');

var BigIntBuffer = require('bigint-buffer');

var assert = require('assert');

var useCryptoCpp = Boolean(process.env.USE_STARKWARE_CRYPTO_CPP);
var libcrypto; // Only load FFI bindings if we run in a Node environment and we asked for it

if (useCryptoCpp) {
  // eslint-disable-next-line
  var ffi = require('ffi-napi'); // Native crypto bindings.


  libcrypto = ffi.Library(path.join(__dirname, '..', '..', 'build', 'Release', 'crypto'), {
    Hash: ['int', ['string', 'string', 'string']],
    Verify: ['bool', ['string', 'string', 'string', 'string']],
    Sign: ['int', ['string', 'string', 'string', 'string']],
    GetPublicKey: ['int', ['string', 'string']]
  });
}

var curveOrder = new BN('800000000000010ffffffffffffffffb781126dcae7b2321e66a241adc64d2f', 16);
/*
 Computes the StarkWare version of the Pedersen hash of x and y.
 Full specification of the hash function can be found here:
 https://docs.starkware.co/starkex-docs/crypto/pedersen-hash-function
*/

function pedersen(x, y) {
  var x_buf = BigIntBuffer.toBufferLE(x, 32);
  var y_buf = BigIntBuffer.toBufferLE(y, 32);
  var res_buf = Buffer.alloc(1024);
  var res = libcrypto.Hash(x_buf, y_buf, res_buf);
  assert.strict(res == 0, 'Error: ' + res_buf.toString('utf-8'));
  return BigIntBuffer.toBigIntLE(res_buf);
}
/*
 Verifies ECDSA signature of a given message hash z with a given public key.
 Returns true if public_key signs the message.
 NOTE: This function assumes that the public_key is on the curve.
*/


function verify(stark_key, message_hash, r, s) {
  var stark_key_buf = BigIntBuffer.toBufferLE(stark_key, 32);
  var message_hash_buf = BigIntBuffer.toBufferLE(message_hash, 32);
  var r_buf = BigIntBuffer.toBufferLE(r, 32);
  var bnS = new BN(s.toString(16), 16);
  var w = BigInt('0x' + bnS.invm(curveOrder).toString(16), 16);
  var s_buf = BigIntBuffer.toBufferLE(w, 32);
  return libcrypto.Verify(stark_key_buf, message_hash_buf, r_buf, s_buf);
}
/*
 Signs the given message hash with the provided private_key, with randomness k.

 NOTE: k should be a strong cryptographical random, and not repeat.
 See: https://tools.ietf.org/html/rfc6979.
*/


function sign(private_key, message, k) {
  var private_key_buf = BigIntBuffer.toBufferLE(private_key, 32);
  var message_buf = BigIntBuffer.toBufferLE(message, 32);
  var k_buf = BigIntBuffer.toBufferLE(k, 32);
  var res_buf = Buffer.alloc(1024);
  var res = libcrypto.Sign(private_key_buf, message_buf, k_buf, res_buf);
  assert.strict(res == 0, 'Error: ' + res_buf.toString('utf-8'));
  var r = BigIntBuffer.toBigIntLE(res_buf.slice(0, 32));
  var w = BigIntBuffer.toBigIntLE(res_buf.slice(32, 64));
  var bnW = new BN(w.toString(16), 16);
  var s = BigInt('0x' + bnW.invm(curveOrder).toString(16), 16);
  return {
    r: r,
    s: s
  };
}
/*
 Deduces the public key given a private key.
 The x coordinate of the public key is also known as the partial public key,
 and used in StarkEx to identify the user.
*/


function getPublicKey(private_key) {
  var private_key_buf = BigIntBuffer.toBufferLE(private_key, 32);
  var res_buf = Buffer.alloc(1024);
  var res = libcrypto.GetPublicKey(private_key_buf, res_buf);
  assert.strict(res == 0, 'Error: ' + res_buf.toString('utf-8'));
  return BigIntBuffer.toBigIntLE(res_buf);
}

module.exports = {
  pedersen: pedersen,
  sign: sign,
  verify: verify,
  getPublicKey: getPublicKey,
  useCryptoCpp: useCryptoCpp
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,