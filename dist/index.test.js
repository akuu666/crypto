"use strict";

var _signature = require("./starkware/signature");

var _ = require(".");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('generateKey', function () {
  var mnemonic = 'range mountain blast problem vibrant void vivid doctor cluster enough melody ' + 'salt layer language laptop boat major space monkey unit glimpse pause change vibrant';
  var keyPair = (0, _.generateKey)(mnemonic);
  it('generates the expected private key', function () {
    expect(keyPair.getPrivate('hex')).toEqual('0646baa9aefb054dfa205c94b43781baa7b2ec2dfbcee64dbd9d2172283de902');
  });
});
describe('transfer', function () {
  var transfer = {
    amount: '2154549703648910716',
    nonce: 1,
    senderVaultId: '34',
    token: '0x3003a65651d3b9fb2eff934a4416db301afd112a8492aaf8d7297fc87dcd9f4',
    receiverVaultId: '21',
    receiverPublicKey: '0x5fa3383597691ea9d827a79e1a4f0f7949435ced18ca9619de8ab97e661020',
    expirationTimestamp: 438953
  };
  var privateKey = '0x07cc2767a160d4ea112b436dc6f79024db70b26b11ed7aa2cb6d7eef19ace703';
  describe('without fees', function () {
    var _signTransfer = (0, _.signTransfer)(privateKey, transfer),
        r = _signTransfer.r,
        s = _signTransfer.s;

    it('creates the correct signature', function () {
      expect(r).toEqual('0x4c21b3df630eab38d75b5538e8f635167f4f7107a885d7adf542a7525240323');
      expect(s).toEqual('0x5eacfaa59ed1b63d75241a1dbd9256d2efbe97f9451f2cf2a2af0bad5b5ab69');
    });
    it('can be verified', function () {
      var publicKey = _signature.starkEc.keyFromPrivate(privateKey.substring(2), 'hex').getPublic(true, 'hex');

      expect((0, _.verifyTransfer)("0x".concat(publicKey), transfer, {
        r: r,
        s: s
      })).toEqual(true);
    });
  });
  describe('with fees', function () {
    var transferWithFee = _objectSpread(_objectSpread({}, transfer), {}, {
      feeInfoUser: {
        sourceVaultId: '46',
        tokenId: '0x3003a65651d3b9fb2eff934a4416db301afd112a8492aaf8d7297fc87dcd9f4',
        feeLimit: '10'
      }
    });

    var _signTransfer2 = (0, _.signTransfer)(privateKey, transferWithFee),
        r = _signTransfer2.r,
        s = _signTransfer2.s;

    it('creates the correct signature', function () {
      expect(r).toEqual('0x675deb2b8eaa0f424d630fcb0896e42ccae281f5c7c030af82704954ccfafe3');
      expect(s).toEqual('0x62385cdd1b624ba2ac09b3d0edee4ad745b5402f5363217ad776abb5cec65f8');
    });
    it('can be verified', function () {
      var publicKey = _signature.starkEc.keyFromPrivate(privateKey.substring(2), 'hex').getPublic(true, 'hex');

      expect((0, _.verifyTransfer)("0x".concat(publicKey), transferWithFee, {
        r: r,
        s: s
      })).toEqual(true);
    });
  });
});
describe('limitOrder', function () {
  var limitOrder = {
    vaultIdSell: 21,
    vaultIdBuy: 27,
    amountSell: '2154686749748910716',
    amountBuy: '1470242115489520459',
    tokenSell: '0x5fa3383597691ea9d827a79e1a4f0f7989c35ced18ca9619de8ab97e661020',
    tokenBuy: '0x774961c824a3b0fb3d2965f01471c9c7734bf8dbde659e0c08dca2ef18d56a',
    nonce: 0,
    expirationTimestamp: 438953
  };
  var privateKey = '0x03c1e9550e66958296d11b60f8e8e7a7ad990d07fa65d5f7652c4a6c87d4e3cc';
  describe('without fees', function () {
    var _signLimitOrder = (0, _.signLimitOrder)(privateKey, limitOrder),
        r = _signLimitOrder.r,
        s = _signLimitOrder.s;

    it('creates the correct signature', function () {
      expect(r).toEqual('0x173fd03d8b008ee7432977ac27d1e9d1a1f6c98b1a2f05fa84a21c84c44e882');
      expect(s).toEqual('0x4b6d75385aed025aa222f28a0adc6d58db78ff17e51c3f59e259b131cd5a1cc');
    });
    it('can be verified', function () {
      var publicKey = _signature.starkEc.keyFromPrivate(privateKey.substring(2), 'hex').getPublic(true, 'hex');

      expect((0, _.verifyLimitOrder)("0x".concat(publicKey), limitOrder, {
        r: r,
        s: s
      })).toEqual(true);
    });
  });
  describe('with fee', function () {
    var limitOrderWithFee = _objectSpread(_objectSpread({}, limitOrder), {}, {
      feeInfo: {
        sourceVaultId: '46',
        tokenId: '0x3003a65651d3b9fb2eff934a4416db301afd112a8492aaf8d7297fc87dcd9f4',
        feeLimit: '10'
      }
    });

    var _signLimitOrder2 = (0, _.signLimitOrder)(privateKey, limitOrderWithFee),
        r = _signLimitOrder2.r,
        s = _signLimitOrder2.s;

    it('creates the correct signature', function () {
      expect(r).toEqual('0x461df4883210443817a91b7792e8ee02b2354b28f415a51a898447558469667');
      expect(s).toEqual('0x1b6d43fba0e3a70dcda6fb595bb7e907f39987703a781508112679332a0454');
    });
    it('can be verified', function () {
      var publicKey = _signature.starkEc.keyFromPrivate(privateKey.substring(2), 'hex').getPublic(true, 'hex');

      expect((0, _.verifyLimitOrder)("0x".concat(publicKey), limitOrderWithFee, {
        r: r,
        s: s
      })).toEqual(true);
    });
  });
});
describe('signMessage', function () {
  var message = 'random message';
  var privateKey = '0x03c1e9550e66958296d11b60f8e8e7a7ad990d07fa65d5f7652c4a6c87d4e3cc';

  var publicKey = _signature.starkEc.keyFromPrivate(privateKey.substring(2), 'hex').getPublic(true, 'hex');

  it('generates a signature that can be verified', function () {
    var signature = (0, _.signMessage)(privateKey, message);
    expect((0, _.verifyMessage)("0x".concat(publicKey), message, signature)).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,