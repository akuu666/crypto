"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "LimitOrder", {
  enumerable: true,
  get: function get() {
    return _types.LimitOrder;
  }
});
Object.defineProperty(exports, "Signature", {
  enumerable: true,
  get: function get() {
    return _types.Signature;
  }
});
Object.defineProperty(exports, "Transfer", {
  enumerable: true,
  get: function get() {
    return _types.Transfer;
  }
});
exports.verifyTransfer = exports.verifyMessage = exports.verifyLimitOrder = exports.signTransfer = exports.signMessage = exports.signLimitOrder = exports.loadPublicKey = exports.loadPrivateKey = exports.generateKey = exports.exportPublicKeyX = exports.exportPublicKey = exports.exportPrivateKey = void 0;

var _bn = _interopRequireDefault(require("bn.js"));

var _bip = require("bip39");

var _ethereumjsWallet = require("ethereumjs-wallet");

var _hash = _interopRequireDefault(require("hash.js"));

var _keyDerivation = require("./starkware/keyDerivation");

var _signature = require("./starkware/signature");

var _crypto = require("./starkware/crypto");

var _types = require("./types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PATH = "m/44'/60'/0'/0/0";

var generateKey = function generateKey(mnemonic) {
  var seed = (0, _bip.mnemonicToSeedSync)(mnemonic || (0, _bip.generateMnemonic)());

  var ethereumAddress = _ethereumjsWallet.hdkey.fromMasterSeed(seed).derivePath(PATH).getWallet().getAddressString();

  var path = (0, _keyDerivation.getAccountPath)('starkex', 'sorare', ethereumAddress, 0);
  return (0, _keyDerivation.getKeyPairFromPath)(mnemonic, path);
};

exports.generateKey = generateKey;

var exportPrivateKey = function exportPrivateKey(key) {
  return "0x".concat(key.getPrivate('hex').padStart(64, '0'));
};

exports.exportPrivateKey = exportPrivateKey;

var exportPublicKey = function exportPublicKey(key) {
  return "0x".concat(key.getPublic(true, 'hex'));
};

exports.exportPublicKey = exportPublicKey;

var exportPublicKeyX = function exportPublicKeyX(key) {
  return "0x".concat(key // force line-break (https://github.com/prettier/prettier/issues/3107)
  .getPublic().getX().toString('hex').padStart(64, '0'));
};

exports.exportPublicKeyX = exportPublicKeyX;

var loadPrivateKey = function loadPrivateKey(privateKey) {
  return _signature.starkEc.keyFromPrivate(privateKey.substring(2), 'hex');
};

exports.loadPrivateKey = loadPrivateKey;

var loadPublicKey = function loadPublicKey(publicKey) {
  return _signature.starkEc.keyFromPublic(publicKey.substring(2), 'hex');
};

exports.loadPublicKey = loadPublicKey;

var hashTransfer = function hashTransfer(transfer) {
  var amount = transfer.amount,
      nonce = transfer.nonce,
      senderVaultId = transfer.senderVaultId,
      token = transfer.token,
      receiverVaultId = transfer.receiverVaultId,
      receiverPublicKey = transfer.receiverPublicKey,
      expirationTimestamp = transfer.expirationTimestamp,
      condition = transfer.condition,
      feeInfoUser = transfer.feeInfoUser;
  var args = [amount, nonce, senderVaultId, token, receiverVaultId, receiverPublicKey, expirationTimestamp, condition];
  if (feeInfoUser) return _signature.getTransferMsgHashWithFee.apply(void 0, args.concat([feeInfoUser.tokenId, feeInfoUser.sourceVaultId, feeInfoUser.feeLimit]));
  return _signature.getTransferMsgHash.apply(void 0, args);
};

var hashLimitOrder = function hashLimitOrder(limitOrder) {
  var vaultIdSell = limitOrder.vaultIdSell,
      vaultIdBuy = limitOrder.vaultIdBuy,
      amountSell = limitOrder.amountSell,
      amountBuy = limitOrder.amountBuy,
      tokenSell = limitOrder.tokenSell,
      tokenBuy = limitOrder.tokenBuy,
      nonce = limitOrder.nonce,
      expirationTimestamp = limitOrder.expirationTimestamp,
      feeInfo = limitOrder.feeInfo;
  var args = [vaultIdSell, vaultIdBuy, amountSell, amountBuy, tokenSell, tokenBuy, nonce, expirationTimestamp];
  if (feeInfo) return _signature.getLimitOrderMsgHashWithFee.apply(void 0, args.concat([feeInfo.tokenId, feeInfo.sourceVaultId, feeInfo.feeLimit]));
  return _signature.getLimitOrderMsgHash.apply(void 0, args);
};

var sign = function sign(privateKey, message) {
  var key = loadPrivateKey(privateKey);

  var _starkSign = (0, _signature.sign)(key, message),
      r = _starkSign.r,
      s = _starkSign.s;

  return {
    r: "0x".concat(r.toString(16)),
    s: "0x".concat(s.toString(16))
  };
};

var verify = function verify(publicKey, message, signature) {
  if (_crypto.useCryptoCpp) {
    return (0, _crypto.verify)(BigInt(publicKey), BigInt("0x".concat(message)), BigInt(signature.r), BigInt(signature.s));
  }

  var key = loadPublicKey(publicKey);
  var sig = {
    r: new _bn.default(signature.r.substring(2), 16),
    s: new _bn.default(signature.s.substring(2), 16)
  };
  return (0, _signature.verify)(key, message, sig);
};

var hashMessage = function hashMessage(message) {
  var h = _hash.default.sha256().update(message).digest('hex');

  return (0, _signature.pedersen)([h.substring(0, 32), h.substring(32)]);
};

var signMessage = function signMessage(privateKey, message) {
  return sign(privateKey, hashMessage(message));
};

exports.signMessage = signMessage;

var verifyMessage = function verifyMessage(publicKey, message, signature) {
  return verify(publicKey, hashMessage(message), signature);
};

exports.verifyMessage = verifyMessage;

var signTransfer = function signTransfer(privateKey, transfer) {
  var message = hashTransfer(transfer);
  return sign(privateKey, message);
};

exports.signTransfer = signTransfer;

var verifyTransfer = function verifyTransfer(publicKey, transfer, signature) {
  var message = hashTransfer(transfer);
  return verify(publicKey, message, signature);
};

exports.verifyTransfer = verifyTransfer;

var signLimitOrder = function signLimitOrder(privateKey, limitOrder) {
  var message = hashLimitOrder(limitOrder);
  return sign(privateKey, message);
};

exports.signLimitOrder = signLimitOrder;

var verifyLimitOrder = function verifyLimitOrder(publicKey, limitOrder, signature) {
  var message = hashLimitOrder(limitOrder);
  return verify(publicKey, message, signature);
};

exports.verifyLimitOrder = verifyLimitOrder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,